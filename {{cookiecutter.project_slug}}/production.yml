version: '2'

volumes:
  postgres_data: {}
  postgres_backup: {}
  caddy: {}

services:
  django:{% if cookiecutter.use_celery == 'y' %} &django{% endif %}
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    depends_on:
      - postgres
      - redis
    env_file: .env
    command: /gunicorn.sh

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backups
    env_file: .env

  nginx:
    build: ./compose/production/nginx
    depends_on:
      - django
      - certbot
    environment:
      - MY_DOMAIN_NAME=dev.dentistmetrics.com
    env_file: .env
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  certbot:
    image: certbot/certbot
    command: certbot certonly -n --standalone -d dev.dentistmetrics.com --agree-tos --email webmaster@dev.dentistmetrics.com --server https://acme-v01.api.letsencrypt.org/directory --rsa-key-size 4096 --verbose --keep-until-expiring --preferred-challenges http-01
    entrypoint: ""
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    ports:
      - "80"
      - "443"
    environment:
      - TERM=xterm

  redis:
    image: redis:3.0
{% if cookiecutter.use_celery == 'y' %}
  celeryworker:
    <<: *django
    depends_on:
     - postgres
     - redis
    command: /start-celeryworker.sh

  celerybeat:
    <<: *django
    depends_on:
      - postgres
      - redis
    command: /start-celerybeat.sh
{% endif %}
